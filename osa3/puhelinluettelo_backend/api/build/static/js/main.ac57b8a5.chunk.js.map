{"version":3,"sources":["components/Person.js","components/Persons.js","components/Filter.js","components/PersonForm.js","components/Notification.js","services/phonebookService.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deletePerson","name","number","onClick","Persons","persons","filter","filteredPersons","toLowerCase","includes","console","log","map","key","id","Filter","handleFilterChange","type","onChange","PersonForm","onSubmit","handlePersonChange","handleNumberChange","Notification","notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","searchTerm","setSearchTerm","setNotification","useEffect","phonebookService","initialPersons","event","target","value","preventDefault","nameObject","i","isThere","returnedName","newNotification","concat","setTimeout","personIndex","findIndex","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac57b8a5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ person, deletePerson }) => {\r\n  return (\r\n    <p>\r\n      {person.name}\r\n      {person.number}\r\n      <button onClick={deletePerson}>delete</button>\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = ({ persons, filter, deletePerson}) => {\r\n  let filteredPersons = persons\r\n  if (filter) {\r\n    filteredPersons = filteredPersons.filter(person =>\r\n      person.name.toLowerCase().includes(filter.toLowerCase()))\r\n  }\r\n\r\n  const rows = () => filteredPersons.map(person =>\r\n    <Person\r\n      key={person.name}\r\n      person={person}\r\n      number={person.number}\r\n      deletePerson={() => deletePerson(person.id)}\r\n    />\r\n  )\r\n\r\n  console.log('filteredPersons', filteredPersons)\r\n  return (\r\n    <ul>\r\n      {rows()}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = ({ handleFilterChange }) => {\r\n  return (\r\n    <div>\r\n      filter shown with:<input type='text' onChange={handleFilterChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({ onSubmit, handlePersonChange, handleNumberChange }) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            name:<input onChange={handlePersonChange} />\r\n            <br/>\r\n            number:<input onChange={handleNumberChange} />\r\n            <br/>\r\n            <button type='submit'>Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n    const message = notification.message\r\n    const type = notification.type\r\n\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    if (type === 'notification')\r\n        return (\r\n            <div className=\"notification\" >\r\n                {message}\r\n            </div>\r\n        )\r\n        if (type === 'error')\r\n        return (\r\n            <div className=\"error\" >\r\n                {message}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport phonebookService from './services/phonebookService'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [notification, setNotification] = useState(\n    {\n      message: null,\n      type: null\n    })\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addNameAndNumber = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const isThere = (persons, name) => {\n      for (let i in persons) {\n        if (persons[i].name.toLowerCase() === name.toLowerCase()) return true\n      }\n      return false\n    }\n\n    if (isThere(persons, nameObject.name)) {\n      const newNotification = {\n        message: `Name '${nameObject.name}' is already added to the phonebook`,\n        type: 'error'\n      }\n      setNewName('')\n      setNewNumber('')\n      return\n    }\n\n    phonebookService\n      .create(nameObject)\n      .then(returnedName => {\n        const newNotification = {\n          message: `Added '${nameObject.name}' to the phonebook`,\n          type: 'notification'\n        }\n        setNotification(newNotification)\n        setPersons(persons.concat(returnedName))\n        setNewName('')\n      })\n    setTimeout(() => {\n      setNotification({\n        message: null,\n        type: null\n      })\n    }, 5000);\n  }\n\n  const handlePersonChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const handleDeletePerson = (id) => {\n    const personIndex = persons.findIndex(person => person.id === id)\n\n    if (window.confirm(`Delete '${persons[personIndex].name}'?`)) {\n      phonebookService\n        .deletePerson(id)\n        .then(() => {\n          const newNotification = {\n            message: `Deleted '${persons[personIndex].name}' from the phonebook`,\n            type: 'notification'\n          }\n          setNotification(newNotification)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n      setTimeout(() => {\n        setNotification({\n          message: null,\n          type: null\n        })\n      }, 5000);\n    }\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      <Filter handleFilterChange={handleFilterChange} />\n\n      <h3>add a new</h3>\n      <PersonForm\n        onSubmit={addNameAndNumber}\n        handlePersonChange={handlePersonChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={searchTerm} deletePerson={handleDeletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}